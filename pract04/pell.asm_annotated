	.file	"c:\lcc\include\stdio.h"
_$M0:
	.file	"c:\tmp\pell.c"
	.text
	.file	"c:\lcc\include\time.h"
_$M1:
	.file	"c:\tmp\pell.c"
_$M2:
	.text
	.type	_atoi,function
_atoi:
	pushl	%ebp
	movl	%esp,%ebp
	pushl	%esi
	pushl	%edi
	movl	8(%ebp),%edi
	xorl	%esi,%esi
	cmpb	$45,(,%edi)
	jne	_$2
	movl	%edi,%eax
	incl	%eax
	pushl	%eax
	call	_atoi
	popl	%ecx
	negl	%eax
	jmp	_$1
_$2:
	cmpb	$43,(,%edi)
	jne	_$7
	movl	%edi,%eax
	incl	%eax
	pushl	%eax
	call	_atoi
	popl	%ecx
	jmp	_$1
_$6:
	movsbl	(,%edi),%eax
	cmpb	$48,%al
	jl	_$9
	cmpb	$57,%al
	jg	_$9
	imul	$10,%esi,%eax
	movsbl	(,%edi),%edx
	subl	$48,%edx
	movl	%eax,%esi
	addl	%edx,%esi
_$9:
	incl	%edi
_$7:
	cmpb	$0,(,%edi)
	jne	_$6
	movl	%esi,%eax
_$1:
	popl	%edi
	popl	%esi
	popl	%ebp
	ret
_$13:
	.size	_atoi,_$13-_atoi
	.globl	_atoi
	.type	_pell,function
_pell:
	pushl	%ebp          ; Zet base pointer op stapel
	movl	%esp,%ebp     ; stack pointer -> base pointer (gemakkelijker werken)
                      ; zo kunnen we makkelijk de functieargumenten addresseren ten 
                      ; opzichte van de base pointer
	pushl	%ecx          ; Waarde ecx onbekend => gewoon een plaats reserveren op stack
	pushl	%esi          ; %esi op de stack
	pushl	%edi          ; %edi op de stack
	movl	8(%ebp),%edi  ; Lees argument n uit en plaats in %edi
	cmpl	$2,%edi       ; (%edi - 2)
	jge	_$15            ; (n-2)>= 0?
	movl	%edi,%eax     ; plaats n (%edi) in %eax en
	jmp	_$14            ; jump naar de lead-out code
	_$15:
	movl	%edi,%eax     ; plaats n (%edi) in %eax (kopie om te decrementeren)
	decl	%eax          ; n-1
	pushl	%eax          ; plaats n-1 op de stapel (argument voor Pell(n-1))
	call	_pell         ; pell(n-1)
	movl	%eax,-4(%ebp) ; schrijf return waarde (%eax) in de gereserveerde plaats
	                    ; op de stack ( overschrijf garbage %ecx! )
	movl	%edi,%esi     ; maak nog een kopie van n in %esi
	subl	$2,%esi       ; trek er nu twee van af (n-2)
	pushl	%esi          ; plaats dit op de stapel
	call	_pell         ; roep pell(n-2) op
	addl	$8,%esp       ; verwijder 2 bovenste waarden van de stack ( de
	                    ; argumenten voor pell(n-1) en pell(n-2) )
	movl	-4(%ebp),%esi ; lees het opgeslagen tussenresultaat pell(n-1) uit
	sall	$1,%esi       ; << 1 == *2
	xchgl	%esi,%eax     ; verwissel 2*pell(n-1) (%esi) en pell(n-2) van plaats
	addl	%esi,%eax     ; tel beide op en schrijf het resultaat in %eax
	_$14:
	popl	%edi          ; herstel %edi
	popl	%esi          ; herstel %esi
	leave               ; leave stack frame: movl %ebp %esp
	                    ; pop  %ebp
	ret
_$20:
	.size	_pell,_$20-_pell
	.globl	_pell
	.type	_main,function
_main:
	pushl	%ebp
	movl	%esp,%ebp
	subl	$20,%esp
	pushl	%edi
	cmpl	$3,8(%ebp)
	jne	_$22
	movl	12(%ebp),%eax
	pushl	4(%eax)
	call	_atoi
	movl	%eax,-8(%ebp)
	movl	12(%ebp),%eax
	pushl	8(%eax)
	call	_atoi
	addl	$8,%esp
	movl	%eax,-16(%ebp)
	call	_clock
	movl	%eax,-20(%ebp)
	andl	$0,-4(%ebp)
	jmp	_$27
_$24:
	pushl	-8(%ebp)
	call	_pell
	popl	%ecx
	movl	%eax,-12(%ebp)
	incl	-4(%ebp)
_$27:
	movl	-16(%ebp),%eax
	cmpl	%eax,-4(%ebp)
	jl	_$24
	call	_clock
	movl	%eax,%edi
	subl	-20(%ebp),%edi
	movl	%edi,-20(%ebp)
	pushl	%edi
	movl	-12(%ebp),%eax
	pushl	%eax
	pushl	%eax
	pushl	-8(%ebp)
	pushl	$_$28
	call	_printf
	addl	$20,%esp
	xorl	%eax,%eax
	jmp	_$21
_$22:
	movl	12(%ebp),%eax
	pushl	(,%eax)
	pushl	$_$29
	call	_printf
	addl	$8,%esp
	xor	%eax,%eax
	inc	%eax
_$21:
	popl	%edi
	leave
	ret
_$36:
	.size	_main,_$36-_main
	.globl	_main
	.extern	_clock
	.extern	_printf
	.data
_$29:
	.byte	70,111,114,109,97,97,116,58,32,37,115,32,119,97,97,114
	; ASCII voor: Formaat: %s waar
	.byte	100,101,32,97,97,110,116,97,108,95,105,116,101,114,97
	; ASCII voor: de aantal_itera
	.byte	116,105,101,115,10,0
	; ASCII voor: raties\n\0
_$28:
	.byte	80,101,108,108,40,37,100,41,32,61,32,37,100,32,40,48
	; Pell(%d) = %d (0
	.byte	120,37,120,41,32,37,100,32,109,115,10,0
	; x%x) %d ms\n\0
